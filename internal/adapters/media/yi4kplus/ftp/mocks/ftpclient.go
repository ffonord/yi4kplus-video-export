// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/media/yi4kplus/ftp/ftpclient.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=internal/adapters/media/yi4kplus/ftp/ftpclient.go -destination=internal/adapters/media/yi4kplus/ftp/mocks/ftpclient.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	ftp "github.com/ffonord/yi4kplus-video-export/internal/adapters/media/yi4kplus/ftp"
	ftp0 "github.com/jlaffaye/ftp"
	gomock "go.uber.org/mock/gomock"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockConn) Delete(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConnMockRecorder) Delete(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConn)(nil).Delete), path)
}

// List mocks base method.
func (m *MockConn) List(path string) ([]*ftp0.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", path)
	ret0, _ := ret[0].([]*ftp0.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConnMockRecorder) List(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConn)(nil).List), path)
}

// Login mocks base method.
func (m *MockConn) Login(user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockConnMockRecorder) Login(user, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockConn)(nil).Login), user, password)
}

// NameList mocks base method.
func (m *MockConn) NameList(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameList", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NameList indicates an expected call of NameList.
func (mr *MockConnMockRecorder) NameList(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameList", reflect.TypeOf((*MockConn)(nil).NameList), path)
}

// Quit mocks base method.
func (m *MockConn) Quit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *MockConnMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockConn)(nil).Quit))
}

// Retr mocks base method.
func (m *MockConn) Retr(path string) (*ftp0.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retr", path)
	ret0, _ := ret[0].(*ftp0.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retr indicates an expected call of Retr.
func (mr *MockConnMockRecorder) Retr(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retr", reflect.TypeOf((*MockConn)(nil).Retr), path)
}

// MockConnFactory is a mock of ConnFactory interface.
type MockConnFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConnFactoryMockRecorder
}

// MockConnFactoryMockRecorder is the mock recorder for MockConnFactory.
type MockConnFactoryMockRecorder struct {
	mock *MockConnFactory
}

// NewMockConnFactory creates a new mock instance.
func NewMockConnFactory(ctrl *gomock.Controller) *MockConnFactory {
	mock := &MockConnFactory{ctrl: ctrl}
	mock.recorder = &MockConnFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnFactory) EXPECT() *MockConnFactoryMockRecorder {
	return m.recorder
}

// NewConn mocks base method.
func (m *MockConnFactory) NewConn(host, port string, timeout time.Duration) (ftp.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConn", host, port, timeout)
	ret0, _ := ret[0].(ftp.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConn indicates an expected call of NewConn.
func (mr *MockConnFactoryMockRecorder) NewConn(host, port, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConn", reflect.TypeOf((*MockConnFactory)(nil).NewConn), host, port, timeout)
}
